// Copyright (c) 2018 The ExchangeCoin team

#include "stdio.h"
#include "string.h"
#include "cequihash.h"
#include "vector"

inline size_t EquihashSolutionLen(unsigned int N, unsigned int K) {
    return (1 << K) * (N / (K + 1) + 1) / 8;
}

struct SolverData {
    int n;
    int k;
    int sol_size;
    std::vector<uint8_t *> solutions;

    SolverData(int _n, int _k) : n(_n), k(_k), sol_size(EquihashSolutionLen(n, k)) {}

    int solution_size() {
        return sol_size;
    }
};

extern "C" int equihashProxy(void *blockData, void *solution) {
    if (!solution) {
        return 0;
    }

    SolverData *data = (SolverData *) blockData;
    uint8_t *sol = new uint8_t[data->solution_size()];
    memcpy(sol, solution, data->solution_size());

    data->solutions.push_back(sol);

    return 0;
}

template<uint32_t K>
struct GenericValidatorTest {
    int n;
    int k;
    bool result;
    const char *input;
    int nonce;
    const uint32_t indices[1 << K];
};

template<uint32_t MaxSols, uint32_t K>
struct GenericSolverTest {
    int n;
    int k;
    const char *input;
    int nonce;
    int nsols;
    const uint32_t indices[MaxSols][1 << K];
};

using SolverTest5 = GenericSolverTest<5, 5>;
using SolverTest9 = GenericSolverTest<6, 9>;
using ValidatorTest5 = GenericValidatorTest<5>;

ValidatorTest5 validatorTests965[] = {
// Original valid solution
        {96, 5, true,  "Equihash is an asymmetric PoW based on the Generalised Birthday problem.", 1,
                {2261,  15185,  36112, 104243, 23779, 118390, 118332, 130041, 32642, 69878, 76925,  80080, 45858,
                                                                                                                   116805, 92842,  111026, 15972, 115059, 85191, 90330,  68190, 122819, 81830,  91132,  23460,
                                                                                                                                                                                                               49807,  52426,  80391,  69567,  114474, 104973, 122568},
        },
// Change one index
        {96, 5, false, "Equihash is an asymmetric PoW based on the Generalised Birthday problem.", 1,
                {2262,  15185,  36112, 104243, 23779, 118390, 118332, 130041, 32642, 69878, 76925,  80080,
                                                                                                           45858,  116805, 92842,  111026, 15972, 115059, 85191, 90330,  68190, 122819, 81830,  91132,
                                                                                                                                                                                                        23460, 49807,  52426,  80391,  69567,  114474, 104973, 122568},
        },
// Swap two arbitrary indices
        {96, 5, false, "Equihash is an asymmetric PoW based on the Generalised Birthday problem.", 1,
                {45858, 15185,  36112, 104243, 23779, 118390, 118332, 130041, 32642, 69878, 76925,  80080,
                                                                                                           2261,   116805, 92842,  111026, 15972, 115059, 85191, 90330,  68190, 122819, 81830,  91132,
                                                                                                                                                                                                        23460, 49807,  52426,  80391,  69567,  114474, 104973, 122568},
        },
// Reverse the first pair of indices
        {96, 5, false, "Equihash is an asymmetric PoW based on the Generalised Birthday problem.", 1,
                {15185, 2261,   36112, 104243, 23779, 118390, 118332, 130041, 32642, 69878, 76925,  80080,
                                                                                                           45858,  116805, 92842,  111026, 15972, 115059, 85191, 90330,  68190, 122819, 81830,  91132,
                                                                                                                                                                                                        23460, 49807,  52426,  80391,  69567,  114474, 104973, 122568},
        },
// Swap the first and second pairs of indices
        {96, 5, false, "Equihash is an asymmetric PoW based on the Generalised Birthday problem.", 1,
                {36112, 104243, 2261,  15185,  23779, 118390, 118332, 130041, 32642, 69878, 76925,  80080,
                                                                                                           45858,  116805, 92842,  111026, 15972, 115059, 85191, 90330,  68190, 122819, 81830,  91132,
                                                                                                                                                                                                        23460, 49807,  52426,  80391,  69567,  114474, 104973, 122568},
        },
// Swap the second-to-last and last pairs of indices
        {96, 5, false, "Equihash is an asymmetric PoW based on the Generalised Birthday problem.", 1,
                {2261,  15185,  36112, 104243, 23779, 118390, 118332, 130041, 32642, 69878, 76925,  80080,
                                                                                                           45858,  116805, 92842,  111026, 15972, 115059, 85191, 90330,  68190, 122819, 81830,  91132,
                                                                                                                                                                                                        23460, 49807,  52426,  80391,  104973, 122568, 69567,  114474},
        },
// Swap the first half and second half
        {96, 5, false, "Equihash is an asymmetric PoW based on the Generalised Birthday problem.", 1,
                {15972, 115059, 85191, 90330,  68190, 122819, 81830,  91132,  23460, 49807, 52426,  80391,
                                                                                                           69567,  114474, 104973, 122568, 2261,  15185,  36112, 104243, 23779, 118390, 118332, 130041,
                                                                                                                                                                                                        32642, 69878,  76925,  80080,  45858,  116805, 92842,  111026},
        },
// Sort the indices
        {96, 5, false, "Equihash is an asymmetric PoW based on the Generalised Birthday problem.", 1,
                {2261,  15185,  15972, 23460,  23779, 32642,  36112,  45858,  49807, 52426, 68190,  69567, 69878,
                                                                                                                   76925,  80080,  80391,  81830, 85191,  90330, 91132,  92842, 104243, 104973, 111026, 114474,
                                                                                                                                                                                                               115059, 116805, 118332, 118390, 122568, 122819, 130041},
        },
// Duplicate indices
        {96, 5, false, "Equihash is an asymmetric PoW based on the Generalised Birthday problem.", 1,
                {2261,  2261,   15185, 15185,  36112, 36112,  104243, 104243, 23779, 23779, 118390, 118390,
                                                                                                           118332, 118332, 130041, 130041, 32642, 32642,  69878, 69878,  76925, 76925,  80080,  80080,
                                                                                                                                                                                                        45858, 45858,  116805, 116805, 92842,  92842,  111026, 111026},
        },
// Duplicate first half
        {96, 5, false, "Equihash is an asymmetric PoW based on the Generalised Birthday problem.", 1,
                {2261,  15185,  36112, 104243, 23779, 118390, 118332, 130041, 32642, 69878, 76925,  80080,
                                                                                                           45858,  116805, 92842,  111026, 2261,  15185,  36112, 104243, 23779, 118390, 118332, 130041,
                                                                                                                                                                                                        32642, 69878,  76925,  80080,  45858,  116805, 92842,  111026},
        },
};

SolverTest5 solverTests485[] = {
        {48, 5, "block header", 0, 1,
            {
                    { 53, 97, 108, 328, 325, 435, 385, 465, 73, 330, 100, 197, 138, 195, 168, 218, 120, 476, 217, 241, 209, 346, 364, 390, 164, 316, 426, 508, 249, 298, 263, 414, },
            }},
        {48, 5, "block header", 2, 2,
            {
                    { 0, 139, 2, 385, 85, 503, 184, 408, 3, 359, 335, 434, 41, 44, 166, 508, 16, 312, 115, 386, 238, 262, 363, 437, 34, 324, 205, 318, 38, 472, 71, 270, },
                    { 34, 395, 127, 315, 43, 82, 146, 442, 72, 115, 181, 425, 172, 252, 314, 485, 54, 474, 295, 464, 228, 458, 420, 477, 209, 390, 413, 468, 214, 219, 375, 428, },
            }},
        {48, 5, "block header", 7, 4,
            {
                    { 0, 437, 111, 223, 142, 231, 162, 466, 4, 369, 121, 406, 77, 468, 78, 224, 40, 172, 228, 378, 68, 299, 252, 392, 98, 266, 332, 487, 157, 402, 359, 463, },
                    { 6, 484, 143, 241, 22, 49, 112, 413, 98, 266, 155, 409, 184, 331, 308, 398, 9, 244, 212, 278, 85, 123, 350, 436, 146, 463, 248, 395, 222, 307, 340, 500, },
                    { 2, 190, 422, 481, 15, 400, 108, 273, 18, 415, 223, 362, 59, 200, 65, 71, 46, 64, 122, 360, 118, 314, 226, 248, 50, 443, 150, 408, 78, 402, 367, 444, },
                    { 32, 498, 192, 430, 51, 440, 191, 213, 104, 497, 222, 442, 126, 147, 181, 418, 42, 128, 471, 487, 230, 379, 335, 427, 122, 351, 157, 224, 129, 455, 273, 346, },
            }},
};

SolverTest5 solverTests965[] = {
        {96, 5, "block header", 0,  5,
            {
                   {1008,  18280, 34711, 57439,  3903,  104059, 81195,  95931,  58336, 118687, 67931,  123026, 64235, 95595,  84355,  122946, 8131,  88988,  45130, 58986,  59899, 78278,  94769, 118158, 25569, 106598, 44224, 96285,  54009, 67246,  85039,  127667},
                   {976,   126621, 100174, 123328, 38477, 105390, 38834, 90500, 6411,  116489, 51107, 129167, 25557, 92292,  38525, 56514,  1110,  98024,  15426, 74455,  3185,  84007, 24328, 36473,  17427, 129451, 27556, 119967, 31704, 62448,  110460, 117894},
                   {3976, 108868, 80426, 109742, 33354, 55962,  68338, 80112, 26648, 28006, 64679, 130709, 41182, 126811, 56563, 129040, 4013, 80357,  38063, 91241,  30768, 72264, 97338, 124455, 5607,  36901, 67672, 87377, 17841, 66985, 77087, 85291},
                   {5970, 21862, 34861, 102517, 11849, 104563, 91620, 110653, 7619, 52100,  21162, 112513, 74964, 79553, 105558, 127256, 21905, 112672, 81803, 92086, 43695, 97911, 66587, 104119, 29017, 61613, 97690, 106345, 47428, 98460, 53655, 109002},
                   {1278, 107636, 80519, 127719, 19716, 130440, 83752, 121810, 15337, 106305, 96940, 117036, 46903, 101115, 82294, 118709, 4915, 70826, 40826, 79883, 37902, 95324, 101092, 112254, 15536, 68760, 68493, 125640, 67620, 108562, 68035, 93430},
            }},
        {96, 5, "block header", 1,  1,
            {
                   {1911,  96020, 94086, 96830,  7895,  51522,  56142,  62444,  15441, 100732, 48983,  64776,  27781, 85932,  101138, 114362, 4497,  14199,  36249, 41817,  23995, 93888,  35798, 96337,  5530,  82377,  66438, 85247,  39332, 78978,  83015,  123505},
            }},
        {96, 5, "block header", 2,  1,
            {
                   {165,   27290, 87424, 123403, 5344,  35125,  49154,  108221, 8882,  90328,  77359,  92348,  54692, 81690,  115200, 121929, 18968, 122421, 32882, 128517, 56629, 88083,  88022, 102461, 35665, 62833,  95988, 114502, 39965, 119818, 45010,  94889},
            }},
        {96, 5, "block header", 10, 2,
            {
                   {1855,  37525, 81472, 112062, 11831, 38873,  45382,  82417,  11571, 47965,  71385,  119369, 13049, 64810,  26995,  34659,  6423,  67533,  88972, 105540, 30672, 80244,  39493, 94598,  17858, 78496,  35376, 118645, 50186, 51838,  70421,  103703},
                   {3671,  125813, 31502,  78587,  25500, 83138,  74685, 98796, 8873,  119842, 21142, 55332,  25571, 122204, 31433, 80719,  3955,  49477,  4225,  129562, 11837, 21530, 75841, 120644, 4653,  101217, 19230, 113175, 16322, 24384,  21271,  96965},
            }},
        {96, 5, "block header", 11, 1,
            {
                   {2570,  20946, 61727, 130667, 16426, 62291,  107177, 112384, 18464, 125099, 120313, 127545, 35035, 73082,  118591, 120800, 13800, 32837,  23607, 86516,  17339, 114578, 22053, 85510,  14913, 42826,  25168, 121262, 33673, 114773, 77592,  83471},
            }},
        {96, 5, "Equihash is an asymmetric PoW based on the Generalised Birthday problem.", 0,  2,
            {
                   {3130,  83179, 30454, 107686, 71240, 88412,  109700, 114639, 10024, 32706,  38019,  113013, 18399, 92942,  21094,  112263, 4146,  30807,  10631, 73192,  22216, 90216,  45581, 125042, 11256, 119455, 93603, 110112, 59851, 91545,  97403,  111102},
                   {3822,  35317,  47508,  119823, 37652, 117039, 69087, 72058, 13147, 111794, 65435, 124256, 22247, 66272,  30298, 108956, 13157, 109175, 37574, 50978,  31258, 91519, 52568, 107874, 14999, 103687, 27027, 109468, 36918, 109660, 42196,  100424},
            }},
        {96, 5, "Equihash is an asymmetric PoW based on the Generalised Birthday problem.", 1,  2,
            {
                   {2261,  15185, 36112, 104243, 23779, 118390, 118332, 130041, 32642, 69878,  76925,  80080,  45858, 116805, 92842,  111026, 15972, 115059, 85191, 90330,  68190, 122819, 81830, 91132,  23460, 49807,  52426, 80391,  69567, 114474, 104973, 122568},
                   {16700, 46276,  21232,  43153,  22398, 58511,  47922, 71816, 23370, 26222,  39248, 40137,  65375, 85794,  69749, 73259,  23599, 72821,  42250, 52383,  35267, 75893, 52152, 57181,  27137, 101117, 45804, 92838,  29548, 29574,  37737,  113624},
            }},
        {96, 5, "Equihash is an asymmetric PoW based on the Generalised Birthday problem.", 2,  1,
            {
                   {6005,  59843, 55560, 70361,  39140, 77856,  44238,  57702,  32125, 121969, 108032, 116542, 37925, 75404,  48671,  111682, 6937,  93582,  53272, 77545,  13715, 40867,  73187, 77853,  7348,  70313,  24935, 24978,  25967, 41062,  58694,  110036},
            }},
        {96, 5, "Equihash is an asymmetric PoW based on the Generalised Birthday problem.", 10, 4,
            {
                   {15465, 59017, 93851, 112478, 24940, 128791, 26154,  107289, 24050, 78626,  51948,  111573, 35117, 113754, 36317,  67606,  21508, 91486,  28293, 126983, 23989, 39722,  60567, 97243,  26720, 56243,  60444, 107530, 40329, 56467,  91943,  93737},
                   {968,   90691,  70664,  112581, 17233, 79239,  66772, 92199, 27801, 44198,  58712, 122292, 28227, 126747, 70925, 118108, 2876,  76082,  39335, 113764, 26643, 60579, 50853, 70300,  19640, 31848,  28672, 87870,  33574, 50308,  40291,  61593},
                   {2229, 30387,  14573, 115700, 20018, 124283, 84929, 91944, 26341, 64220, 69433, 82466,  29778, 101161, 59334, 79798,  2533, 104985, 50731, 111094, 10619, 80909, 15555, 119911, 29028, 42966, 51958, 86784, 34561, 97709, 77126, 127250},
                   {1181, 61261, 75793, 96302,  36209, 113590, 79236, 108781, 8275, 106510, 11877, 74550,  45593, 80595, 71247,  95783,  2991,  99117,  56413, 71287, 10235, 68286, 22016, 104685, 51588, 53344, 56822, 63386,  63527, 75772, 93100, 108542},
            }},
        {96, 5, "Equihash is an asymmetric PoW based on the Generalised Birthday problem.", 11, 1,
            {
                   {1120,  77433, 58243, 76860,  11411, 96068,  13150,  35878,  15049, 88928,  20101,  104706, 29215, 73328,  39498,  83529,  9233,  124174, 66731, 97423,  10823, 92444,  25647, 127742, 12207, 46292,  22018, 120758, 14411, 46485,  21828,  57591},
            }},
};

SolverTest5 solverTests1445[] = {
        {144, 5, "block header", 0,  3,
            {
                    {1948823, 6927010,  5051182,  16853572, 7567151,  8174004,  9697548,  30082354, 4126978,  11219458, 12046931, 26296269, 6960990,  7513282,  15641819, 29553952, 2075509, 3917596,  26506206, 32423116, 20172796, 26046597, 21008102, 32605968, 7733247,  28951159, 19401173, 22240259, 12527355, 25816053, 26924563, 30167801},
                    {893099,  8838806,  28398733, 31357275, 16596368, 25123776, 18326148, 31682454, 924167,  27761424, 20546064, 30880786, 2931034,  11343701, 17011529, 26876917, 4915668, 8097132,  17630254, 19828133, 5205703,  15014329, 13248799, 31182371, 7887075, 22909946, 28758238, 31473391, 14791659, 33348545, 23436578, 26267836},
                    {592534, 16727887, 7453057,  25925862, 3112444, 22940957, 11281555, 31775301, 1334223, 20443726, 11070438, 27290152, 4163350, 8213747,  9315696,  19739115, 1204738, 23545872, 1776094,  13506389, 6697536,  27749507, 11388567, 14622750, 4026870,  14622947, 8538779,  27133048, 11652285, 21221152, 22429643, 26529065},
            }},
        {144, 5, "block header", 1,  5,
            {
                    {582263,  3783052,  2313999,  19478261, 1954747,  14513744, 5696384,  9983371,  770696,  25399708, 2469656,  31060031, 1409486,  25011708, 6197016,  24800042, 4526208, 20923264, 22532911, 24458988, 19054856, 19620962, 21223763, 25258694, 5339436, 15681349, 11143785, 21451088, 8434833,  30577236, 27811311, 32663733},
                    {370176, 12908777, 1114179,  27164301, 6258700, 25604518, 23849263, 25098550, 3874837, 22260519, 6421829,  20746376, 9010370, 14958301, 11701370, 20286183, 3453033, 22917202, 17399732, 25201320, 12365907, 25599116, 12861876, 16581537, 6291684,  17504753, 17494629, 17928408, 10119629, 10615318, 17868827, 20213583},
                    {1791926, 8318711, 26251202, 32356717, 6997365, 25735638, 21576954, 30111878, 3898334, 19905391, 5033991, 16030336, 5245813, 26522082, 5669465, 16635645, 8277609, 22422842, 13069153, 29511907, 20365907, 23921315, 24326546, 32342867, 12058103, 23466254, 19021516, 19329156, 15273796, 15658582, 15782868, 30953403},
                    {635733,  25222820, 21014930, 29574076, 1000985,  5604521,  6974734,  19935829, 3041402,  6498908,  27180330, 29522758, 3065872,  28403257, 5814381,  33337207, 1920304, 16178841, 24948948, 25474220, 14568607, 30131615, 16282584, 28097350, 6277286,  20609353, 13688741, 20448955, 8669674,  28133172, 18969419, 33014245},
                    {1784595, 8730569, 2952232, 8311088, 3848398, 24535350, 6741302, 15864803, 5653320, 16018355, 17835034, 29486303, 5823367, 20140719, 7233264, 33483182, 3117353, 20053611, 3338894, 15846604, 7165521, 28162236, 8412349, 11018248, 7341551, 18365873, 16351743, 22192468, 8662075, 9732645, 14238971, 22027130},
            }},
        {144, 5, "block header", 2,  3,
            {
                    {2024468, 30788885, 16549044, 31105157, 10766172, 27803398, 14188383, 18350597, 8340166, 12112117, 9771703,  16475394, 15638163, 19852515, 16164133, 21283881, 3012382, 10164383, 4371003,  27267590, 4579840,  32997246, 17142413, 27563106, 4959833, 19397820, 7489484,  26132602, 7957443,  27721944, 26669199, 27861139},
                    {631838, 32379030, 12115828, 15370934, 1071098, 28542374, 3749356,  23094728, 1030877, 4102154,  3296262,  16677836, 7373429, 23553272, 13706818, 22718294, 1600870, 2009968,  24236940, 26722391, 3296672,  30961726, 8361013,  20154770, 3094572,  28709268, 6668495,  32281682, 11480232, 24080407, 21721486, 26351116},
                    {5378620, 10759970, 17807788, 29226493, 11529006, 22674062, 17704747, 23436136, 10872275, 25829134, 15459988, 21678082, 17603136, 22657822, 22774669, 23569569, 6492083, 20372131, 27398382, 33053456, 21986403, 23346432, 29327458, 33052852, 13637567, 26765408, 26834306, 29589598, 17363888, 31088383, 17860587, 20580709},
            }},
        {144, 5, "block header", 10, 0, {}},
        {144, 5, "block header", 11, 1,
            {
                    {911662, 22138389, 8210265,  31274530, 8029780, 20878462, 18256796, 24246891, 1935509, 22500647, 18385714, 21573406, 5314654, 11279996, 7578895,  12470048, 3573289, 16335834, 8230824,  25830081, 4414521,  7228234,  20359437, 21115537, 11102213, 12353678, 19277545, 26893604, 13111251, 30773720, 14408826, 26047501},
            }},
};



template<typename T>
bool singleValidatorTest(T *test) {
    size_t inputLen = strlen(test->input);
    void *equihashSolution = SolutionFromIndices(test->n, test->k, test->indices, 32);
    bool result = EquihashValidate(test->n, test->k, test->input, inputLen, test->nonce, equihashSolution);

    free(equihashSolution);

    return (result == 0) == test->result;
}

template <typename T>
bool singleSolverTest(T* test) {
    size_t inputLen = strlen(test->input);

    SolverData sd(test->n, test->k);

    EquihashSolve(test->n, test->k, test->input, inputLen, test->nonce, &sd);

    fprintf(stderr, " got %d solutions, want %d ... ", (uint32_t)sd.solutions.size(), (uint32_t)test->nsols);
    int proof_size = 1 << test->k;

    int k = 0;
    for(uint8_t * sol : sd.solutions) {
        uint32_t * result = (uint32_t *)IndicesFromSolution(test->n, test->k, sol);

        for (int i = 0; i < proof_size; i++) {
            if (test->indices[k][i] != result[i]) {
                fprintf(stderr, "index mismatch at %d, want %d, got %d ...", i, test->indices[k][i], result[i]);

                //------------------------------------------
                fprintf(stderr, "\n{\n    ");
                for(int j = 0; j < proof_size; j++) {
                    fprintf(stderr, "%d, ", result[j]);
                }
                fprintf(stderr, "}\n");
                //------------------------------------------

                free(result);
                return false;
            }
        }

        int rc = EquihashValidate(test->n, test->k, test->input, inputLen, test->nonce, sol);

        if (rc != 0) {
            fprintf(stderr, " does not pass validation ...");
            return false;
        }

        free(result);
        k++;
    }

    return sd.solutions.size() == (size_t)test->nsols;
}


#define ARRAY_LEN(arr)  (sizeof(arr)/sizeof(arr[0]))
#define TEST_VALIDATOR(arr) {\
    int nTests = ARRAY_LEN(arr); \
    for (int i = 0; i < nTests; i++) {  \
        fprintf(stderr, "Validation test (%d) ...", i); \
        fprintf(stderr, "%s\n", singleValidatorTest(&arr[i]) ? "PASS" : "FAIL"); \
    }}

#define TEST_SOLVER(arr) {\
    int nTests = ARRAY_LEN(arr);\
    for (int i = 0; i < nTests; i++) { \
        fprintf(stderr, "Solving test (%d:%d) (%d) ...", arr[i].n, arr[i].k, i); \
        fprintf(stderr, "%s\n", singleSolverTest(&arr[i]) ? "PASS" : "FAIL");\
    }}

int main() {
    TEST_VALIDATOR(validatorTests965);
    TEST_SOLVER(solverTests485);
    TEST_SOLVER(solverTests965);
    TEST_SOLVER(solverTests1445);
}
